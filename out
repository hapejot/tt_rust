The following warnings were discovered during the build. These warnings are an
indication that the packages contain code that will become an error in a
future release of Rust. These warnings typically cover changes to close
soundness problems, unintended or undocumented behavior, or critical problems
that cannot be fixed in a backwards-compatible fashion, and are not expected
to be in wide use.

Each warning should contain a link for more information on what the warning
means and how to resolve it.


To solve this problem, you can try the following approaches:


- Some affected dependencies have newer versions available.
You may want to consider updating them to a newer version to see if the issue has been fixed.

nom v4.2.3 has the following newer versions available: 5.0.0-alpha1, 5.0.0-alpha2, 5.0.0-beta1, 5.0.0-beta2, 5.0.0-beta3, 5.0.0, 5.0.1, 5.1.0, 5.1.1, 5.1.2, 5.1.3, 6.0.0-alpha1, 6.0.0-alpha2, 6.0.0-alpha3, 6.0.0-beta1, 6.0.0-beta2, 6.0.0-beta3, 6.0.0-beta4, 6.0.0-beta5, 6.0.0, 6.0.1, 6.1.0, 6.1.1, 6.1.2, 6.2.0, 6.2.1, 6.2.2, 7.0.0-alpha1, 7.0.0-alpha2, 7.0.0-alpha3, 7.0.0, 7.1.0, 7.1.1, 7.1.2, 7.1.3


- If the issue is not solved by updating the dependencies, a fix has to be
implemented by those dependencies. You can help with that by notifying the
maintainers of this problem (e.g. by creating a bug report) or by proposing a
fix to the maintainers (e.g. by creating a pull request):

  - nom@4.2.3
  - Repository: https://github.com/Geal/nom
  - Detailed warning command: `cargo report future-incompatibilities --id 1 --package nom@4.2.3`

- If waiting for an upstream fix is not an option, you can use the `[patch]`
section in `Cargo.toml` to use your own version of the dependency. For more
information, see:
https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section
        
The package `nom v4.2.3` currently triggers the following future incompatibility lints:
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:495:3
>     |
> 495 |   map!(i, be_u8, |x| x as i8)
>     |   --------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:501:3
>     |
> 501 |   map!(i, be_u16, |x| x as i16)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |       map!(__impl $i, call!($f), $g);
>     |                                     ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:508:3
>     |
> 508 | /   map!(i, be_u24, |x| if x & 0x80_00_00 != 0 {
> 509 | |     (x | 0xff_00_00_00) as i32
> 510 | |   } else {
> 511 | |     x as i32
> 512 | |   })
>     | |____- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:518:3
>     |
> 518 |   map!(i, be_u32, |x| x as i32)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:524:3
>     |
> 524 |   map!(i, be_u64, |x| x as i64)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:531:3
>     |
> 531 |   map!(i, be_u128, |x| x as i128)
>     |   ------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:619:3
>     |
> 619 |   map!(i, le_u8, |x| x as i8)
>     |   --------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:625:3
>     |
> 625 |   map!(i, le_u16, |x| x as i16)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |       map!(__impl $i, call!($f), $g);
>     |                                     ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:632:3
>     |
> 632 | /   map!(i, le_u24, |x| if x & 0x80_00_00 != 0 {
> 633 | |     (x | 0xff_00_00_00) as i32
> 634 | |   } else {
> 635 | |     x as i32
> 636 | |   })
>     | |____- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:642:3
>     |
> 642 |   map!(i, le_u32, |x| x as i32)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:648:3
>     |
> 648 |   map!(i, le_u64, |x| x as i64)
>     |   ----------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:666:35
>     |
> 666 |     map!(__impl $i, call!($f), $g);
>     |                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:655:3
>     |
> 655 |   map!(i, le_u128, |x| x as i128)
>     |   ------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/sequence.rs:46:60
>     |
> 46  |       tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);
>     |                                                              ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:817:3
>     |
> 817 | /   recognize!(input,
> 818 | |     tuple!(
> 819 | |       opt!(alt!(char!('+') | char!('-'))),
> 820 | |       alt!(
> ...   |
> 830 | |     )
> 831 | |   )
>     | |___- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>     --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/macros.rs:1005:24
>      |
> 1005 |       opt!($i, call!($f));
>      |                          ^
>      |
>     ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:817:3
>      |
> 817  | /   recognize!(input,
> 818  | |     tuple!(
> 819  | |       opt!(alt!(char!('+') | char!('-'))),
> 820  | |       alt!(
> ...    |
> 830  | |     )
> 831  | |   )
>      | |___- in this macro invocation
>      |
>      = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>      = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>      = note: macro invocations at the end of a block are treated as expressions
>      = note: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`
>      = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>      = note: this warning originates in the macro `opt` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/sequence.rs:69:49
>     |
> 69  |       tuple_parser!($i, ($($parsed),*), call!($e));
>     |                                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:817:3
>     |
> 817 | /   recognize!(input,
> 818 | |     tuple!(
> 819 | |       opt!(alt!(char!('+') | char!('-'))),
> 820 | |       alt!(
> ...   |
> 830 | |     )
> 831 | |   )
>     | |___- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/sequence.rs:69:49
>     |
> 69  |       tuple_parser!($i, ($($parsed),*), call!($e));
>     |                                                   ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:817:3
>     |
> 817 | /   recognize!(input,
> 818 | |     tuple!(
> 819 | |       opt!(alt!(char!('+') | char!('-'))),
> 820 | |       alt!(
> ...   |
> 830 | |     )
> 831 | |   )
>     | |___- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/simple_errors.rs:184:57
>     |
> 184 |     flat_map!(__impl $i, call!($f), $submac!($($args)*));
>     |                                                         ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:846:3
>     |
> 846 |   flat_map!(input, recognize_float, parse_to!(f32))
>     |   ------------------------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/simple_errors.rs:178:69
>     |
> 178 |     flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));
>     |                                                                     ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:861:3
>     |
> 861 |   flat_map!(input, call!(recognize_float), parse_to!(f32))
>     |   -------------------------------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/simple_errors.rs:178:69
>     |
> 178 |     flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));
>     |                                                                     ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:875:3
>     |
> 875 |   flat_map!(input, call!(recognize_float), parse_to!(f64))
>     |   -------------------------------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
> warning: trailing semicolon in macro used in expression position
>    --> /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/simple_errors.rs:178:69
>     |
> 178 |     flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));
>     |                                                                     ^
>     |
>    ::: /home/peter/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-4.2.3/src/nom.rs:890:3
>     |
> 890 |   flat_map!(input, call!(recognize_float), parse_to!(f64))
>     |   -------------------------------------------------------- in this macro invocation
>     |
>     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
>     = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>
>     = note: macro invocations at the end of a block are treated as expressions
>     = note: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`
>     = note: `#[allow(semicolon_in_expressions_from_macros)]` on by default
>     = note: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)
> 
